from pathlib import Path

path = Path('src/bot.js')
text = path.read_text(encoding='utf-8')
old_block = "bot.action(/^complaint:(.+)$/i, async (ctx) => {\n  if (isAdmin(ctx.from.id)) {\n    await ctx.answerCbQuery();\n    return;\n  }\n\n  if (await isStopWork(ctx)) {\n    await ctx.answerCbQuery('🚧');\n    clearUserState(ctx.from.id);\n    return;\n  }\n\n  const lineId = ctx.match[1];\n  const user = await repository.getUser(ctx.from.id);\n  const language = getUserLanguage(user);\n\n  if (!user || !user.lineIds.includes(lineId)) {\n    await ctx.answerCbQuery(t(language, 'noAccessLine'), { show_alert: true });\n    return;\n  }\n\n  const line = await repository.getLine(lineId);\n\n  userStates.set(Number(ctx.from.id), {\n    type: 'awaitingComplaintDescription',\n    payload: { lineId },\n  });\n\n  const responseText = t(language, 'complaintLineChosen', {\n    lineTitle: line?.title,\n    lineId,\n  });\n\n  await ctx.answerCbQuery('✅');\n  try {\n    await ctx.editMessageText(responseText);\n  } catch (error) {\n    await ctx.reply(responseText);\n  }\n});\n"
new_block = "bot.action(/^complaint:(.+)$/i, async (ctx) => {\n  if (isAdmin(ctx.from.id)) {\n    await ctx.answerCbQuery();\n    return;\n  }\n\n  if (await isStopWork(ctx)) {\n    await ctx.answerCbQuery('🚧');\n    clearUserState(ctx.from.id);\n    return;\n  }\n\n  const lineId = decodeCallbackComponent(ctx.match[1]);\n  const user = await repository.getUser(ctx.from.id);\n  const language = getUserLanguage(user);\n\n  if (!user || !user.lineIds.includes(lineId)) {\n    await ctx.answerCbQuery(t(language, 'noAccessLine'), { show_alert: true });\n    return;\n  }\n\n  const line = await repository.getLine(lineId);\n\n  if (!line) {\n    await ctx.answerCbQuery(t(language, 'lineMissing'), { show_alert: true });\n    return;\n  }\n\n  const sipOptions = getSipOptions(line);\n\n  if (sipOptions.length) {\n    userStates.set(Number(ctx.from.id), {\n      type: 'awaitingComplaintSip',\n      payload: { lineId, sipOptions },\n    });\n\n    const promptText = t(language, 'complaintChooseSip', {\n      lineTitle: line.title,\n      lineId: line.id,\n    });\n    const keyboard = buildSipKeyboard(line, sipOptions, language);\n\n    await ctx.answerCbQuery('✅');\n    try {\n      await ctx.editMessageText(promptText, keyboard);\n    } catch (error) {\n      await ctx.reply(promptText, keyboard);\n    }\n    return;\n  }\n\n  userStates.set(Number(ctx.from.id), {\n    type: 'awaitingComplaintDescription',\n    payload: { lineId, sip: null },\n  });\n\n  const responseText = t(language, 'complaintLineChosen', {\n    lineTitle: line?.title,\n    lineId,\n  });\n\n  await ctx.answerCbQuery('✅');\n  try {\n    await ctx.editMessageText(responseText);\n  } catch (error) {\n    await ctx.reply(responseText);\n  }\n});\n"
if old_block not in text:
    raise SystemExit('complaint action block not found')
path.write_text(text.replace(old_block, new_block, 1), encoding='utf-8')
